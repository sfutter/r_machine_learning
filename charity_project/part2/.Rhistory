# create new data.frame (df.num) with numeric and integer values only to plot correlations
df.num = df[,sapply(df, class) %in% c("numeric", "integer") ]
setwd('/Users/stevenfutter/Dropbox/NU/MACHINE_LEARNING/charity_project/part2')
charity = read.csv('projectDataPart2.csv', header=T, na.strings=c("NA"," "),stringsAsFactors = TRUE,
colClasses=c("DONR"="factor", "HOME"="factor","HINC"="factor"))
# set up $ expansion
attach(charity)
# check that column types are set up correctly
str(charity)
# confirm size of data table
dim(charity) # 71700 21 in part 2 csv compared to part 1 csv which was dim: 3684 21
# take a peek at the data
head(charity)
library(Hmisc)
Hmisc::describe(charity)
sapply(charity, function(x) sum(is.na(x)))
library(plyr)
library(psych)
multi.hist(charity[,sapply(charity, is.numeric)])
df = charity[,-1]   # remove ID variable
names(df)
# create new data.frame (df.num) with numeric and integer values only to plot correlations
df.num = df[,sapply(df, class) %in% c("numeric", "integer") ]
# calculate the correlations between each variable and DAMT
apply(df.num,2, function(col)cor(col, df.num$DAMT))
# # build scatterplots between numeric variables
# par(mfrow=c(1,3))
# plot(df.num$LASTGIFT, df.num$DAMT)
# plot(df.num$MAXRAMNT, df.num$DAMT)
# plot(df.num$RAMNTALL, df.num$DAMT)
# create new data.frame (df.num) with numeric and integer values only to plot correlations
df.num = df[,sapply(df, class) %in% c("numeric", "integer") ]
# calculate the correlations between each variable and DAMT
apply(df.num,2, function(col)cor(col, df.num$DONR))
summary(charity[, df.num])
summary(charity[, c('LASTGIFT','RAMNTALL')])
frequency(charity)
frequency(charity, DONR)
df = charity[,-1]   # remove ID variable
names(df)
frequency(DONR, AGE)
freq(DONR, AGE)
table(DONR, AGE)
table(DONR, df.num)
table(DONR, AGE)
table(DONR, AGE).T
table(DONR, AGE)
transpose(table(DONR, AGE))
boxplot(DONR~HOME, data=charity, col='lightgray',main="Charity Data - HOME",
xlab="Home Owner (HOME)",
ylab="Donation Amount (in $)")
boxplot(DONR~MEDAGE, data=charity, col='lightgray',main="Charity Data - HOME",
xlab="Home Owner (HOME)",
ylab="Donation Amount (in $)")
boxplot(DAMT~HOME, data=charity, col='lightgray',main="Charity Data - HOME",
xlab="Home Owner (HOME)",
ylab="Donation Amount (in $)")
table(DONR, AGE)
table(classData$DONR)
table(charity$DONR)
barplot(table(charity$DONR),xlab="DONR")
classData = charity
table(classData$GENDER,useNA="ifany")
barplot(table(classData$GENDER,useNA="ifany"),main="Gender")
plot(classData$DONR,classData$AGE,xlab="DONR",ylab="AGE")
# Plot response against a categorical variable
# "Wrong" Way
# The following barplot is an accurate presentation of the data. I call it the
# "wrong" way because students have a tendency to draw the wrong conclusions from
# this graph.
barplot(table(classData$GENDER[classData$DONR == 1]),
xlab="GENDER",main="Barplot of GENDER for DONR = 1")
# "Right" Way
# A mosaic plot is obtained when we plot one factor variable against another. The
# mosaic plot represents the counts as proportions to the whole. A deviation in
# overall proportion of females donating compared to males donating is meaningful
# whereas the absolute count of females donating compared to males donating was not.
plot(classData$DONR,classData$GENDER,xlab="DONR",ylab="GENDER",main="Mosaic Plot")
plot(classData$GENDER,classData$DONR,xlab="GENDER",ylab="DONR",main="Mosaic Plot")
barplot(table(classData$GENDER[classData$DONR == 1]),
xlab="GENDER",main="Barplot of GENDER for DONR = 1")
plot(classData$DONR,classData$GENDER,xlab="DONR",ylab="GENDER",main="Mosaic Plot")
plot(classData$GENDER,classData$DONR,xlab="GENDER",ylab="DONR",main="Mosaic Plot")
plot(classData$HOME,classData$DONR,xlab="HOME",ylab="DONR",main="Mosaic Plot")
classData = charity
# Counts of the response variable DONR
table(classData$DONR)
barplot(table(classData$DONR),xlab="DONR")
table(classData$DAMT)
barplot(table(classData$DAMT),xlab="DONR")
table(classData$DAMT)
y <- LETTERS[as.integer(rnorm(100, mean=5, sd=1))]
y
z <- LETTERS[as.integer(rnorm(100, mean=10, sd=1))]
x <- round(rnorm(100, mean=5, sd=2.5),2)
data <- as.data.frame(cbind(x,y,z))
data
A<- do.call("cbind", lapply(data, class))
A
B<- as.vector( A[1,])
B
C <- grep("character|factor", B)
C <- grep("character|factor", B)
C
?grep
for (i in 1:length(C)) {
x <- C[i]
counti <- table(data[,x])
y <- barplot(counti, main=paste("Barplot for var", x))
return(y)}
par(mfrow=c(4,4))
barplot(table(classData$DONR),xlab="DONR")
barplot(table(classData$DAMT),xlab="DAMT")
barplot(table(classData$AGE),xlab="AGE")
barplot(table(classData$HOME),xlab="HOME")
barplot(table(classData$HINC),xlab="HINC")
barplot(table(classData$AGE),xlab="GENDER")
barplot(table(classData$MEDAGE),xlab="MEDAGE")
barplot(table(classData$MEDPPH),xlab="MEDPPH")
barplot(table(classData$MEDHVAL),xlab="MEDHVAL")
barplot(table(classData$MEDINC),xlab="MEDINC")
barplot(table(classData$MEDEDUC),xlab="MEDEDUC")
barplot(table(classData$NUMPROM),xlab="NUMPROM")
barplot(table(classData$NUMPRM12),xlab="NUMPROM12")
barplot(table(classData$RAMNTALL),xlab="RAMNTALL")
barplot(table(classData$NGIFTALL),xlab="NGIFTALL")
barplot(table(classData$LASTGIFT),xlab="LASTGIFT")
par(mfrow=c(2,2))
barplot(table(classData$DONR),xlab="DONR")
barplot(table(classData$DAMT),xlab="DAMT")
barplot(table(classData$AGE),xlab="AGE")
barplot(table(classData$HOME),xlab="HOME")
par(mfrow=c(1,1))
barplot(table(classData$AGE),xlab="AGE")
